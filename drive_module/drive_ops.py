#drive_ops.py

import streamlit as st
import re
from .auth import get_drive_service
from googleapiclient.http import MediaIoBaseDownload
import io
import yaml

def get_or_cache_data(key, loader_func, dependencies=None):
    dep_key = f"{key}__deps"
    if key in st.session_state and dep_key in st.session_state:
        if st.session_state[dep_key] == dependencies:
            return st.session_state[key]
    data = loader_func()
    st.session_state[key] = data
    st.session_state[dep_key] = dependencies
    return data


def extract_bullet_items_from_section(file_id, section_name):
    """
    T·ª´ m·ªôt file Markdown (qua file_id), tr√≠ch xu·∫•t c√°c d√≤ng d·∫°ng bullet point (- ...)
    trong ph·∫ßn ti√™u ƒë·ªÅ ## {section_name}: (d√≤ng c√≥ ƒë·ªãnh d·∫°ng c·ª• th·ªÉ).

    Tr·∫£ v·ªÅ danh s√°ch c√°c d√≤ng bullet (kh√¥ng x·ª≠ l√Ω th√™m).
    """
    content = get_file_content(file_id)

    # T√¨m ph·∫ßn gi·ªØa ## {section_name}: v√† ## ti·∫øp theo ho·∫∑c h·∫øt file
    pattern = rf"##\s*{re.escape(section_name)}\s*:\s*(.*?)(?=\n##\s|\Z)"
    match = re.search(pattern, content, re.DOTALL | re.IGNORECASE)

    if not match:
        return []

    block = match.group(1)

    # L·∫•y c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng '-'
    lines = block.strip().splitlines()
    bullet_lines = [line.strip() for line in lines if line.strip().startswith("-")]

    return bullet_lines

def extract_yaml_from_file_id(file_id):
    """
    ƒê·ªçc n·ªôi dung file .md tr√™n Google Drive b·∫±ng file_id
    v√† tr√≠ch xu·∫•t YAML front matter n·∫øu c√≥.
    """
    content = get_file_content(file_id)

    match = re.search(r'^---\s*(.*?)\s*---', content, re.DOTALL | re.MULTILINE)
    if not match:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y YAML front matter.")
        return {}

    try:
        data = yaml.safe_load(match.group(1))
        return data or {}
    except yaml.YAMLError as e:
        st.error(f"‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch YAML: {e}")
        return {}

def get_file_content(file_id):
    """ƒê·ªçc n·ªôi dung file t·ª´ Google Drive (d·∫°ng vƒÉn b·∫£n)."""
    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)

    done = False
    while not done:
        status, done = downloader.next_chunk()

    return fh.getvalue().decode("utf-8")

def extract_folder_id_from_url(url: str) -> str:
    """Tr√≠ch xu·∫•t folder ID t·ª´ URL Google Drive."""
    match = re.search(r"/folders/([a-zA-Z0-9_-]+)", url)
    if not match:
        return None
    return match.group(1)

def select_working_folder():
    """Hi·ªÉn th·ªã √¥ nh·∫≠p URL th∆∞ m·ª•c ·ªü sidebar v√† tr·∫£ v·ªÅ folder ID."""
    with st.sidebar:
        url = st.text_input("üîó Nh·∫≠p link th∆∞ m·ª•c Google Drive (Working Folder)")

    folder_id = extract_folder_id_from_url(url) if url else None

    if url and not folder_id:
        st.sidebar.warning("‚ùå Link kh√¥ng h·ª£p l·ªá. Link ph·∫£i c√≥ d·∫°ng ch·ª©a /folders/<ID>")

    return folder_id

def list_folder_contents(folder_id):
    """
    Li·ªát k√™ t·∫•t c·∫£ file v√† th∆∞ m·ª•c con trong m·ªôt th∆∞ m·ª•c Google Drive.
    Tr·∫£ v·ªÅ danh s√°ch dict: {"name": ..., "id": ..., "mimeType": ...}
    """
    query = f"'{folder_id}' in parents and trashed = false"
    fields = "files(id, name, mimeType)"
    
    results = drive_service.files().list(q=query, fields=fields).execute()
    files = results.get("files", [])
    #files l√† 1 list v·ªõi m·ªói ph·∫ßn t·ª≠ l√† 3 dict ch·ª©a id, name v√† ki·ªÉu d·ªØ li·ªáu
    return files

drive_service = get_drive_service()